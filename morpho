emulate -LR zsh

zmodload zsh/mathfunc

integer width=10 height=10

float CA=10.0
float CB=23.39
integer iterations=14

# Old system state
typeset -A Ao Bo

# New system state
typeset -A An Bn

# Helper variables
integer index colidx
float color
float shade
float tmp1 tmp2

typeset -a colortable1; colortable1=(
16 59 102 145 95 138 188 101 144 65 108 109 66 60 103 96 139 231 131 137 143
107 71 72 73 67 61 97 133 132 181 187 151 152 146 182 174 180 186 150 114 115
116 110 104 140 176 175 167 173 179 185 149 113 77 78 79 80 74 68 62 98 134 170
169 168 52 58 22 23 17 53 88 94 100 64 28 29 30 24 18 54 90 89 124 130 136 142
106 70 34 35 36 37 31 25 19 55 91 127 126 125 160 166 172 178 184 148 112 76 40
41 42 43 44 38 32 26 20 56 92 128 164 163 162 161 196 202 208 214 220 226 190
154 118 82 46 47 48 49 50 51 45 39 33 27 21 57 93 129 165 201 200 199 198 197
203 209 215 221 227 191 155 119 83 84 85 86 87 81 75 69 63 99 135 171 207 206
205 204 210 216 222 228 192 156 120 121 122 123 117 111 105 141 177 213 212 211
217 223 229 193 157 158 159 153 147 183 219 218 224 230 194 195 189 225
)

typeset -a colortable2; colortable2=(
16 59 102 145 188 231 138 144 108 109 103 139 95 101 65 66 60 96 181 187 151
152 146 182 224 230 194 195 189 225 174 180 186 150 114 115 116 110 104 140 176
175 217 131 223 137 143 229 107 193 71 157 158 72 73 159 153 67 61 147 183 97
133 219 132 218 52 58 22 23 17 53 88 210 216 94 222 228 100 192 64 156 28 120
121 29 122 30 123 117 24 111 18 105 141 54 177 90 213 212 89 211 167 173 179
185 149 113 77 78 79 80 74 68 62 98 134 170 169 168 124 130 136 142 106 70 34
35 36 37 31 25 19 55 91 127 126 125 203 209 215 221 227 191 155 119 83 84 85 86
87 81 75 69 63 99 135 171 207 206 205 204 160 166 172 178 184 148 112 76 40 41
42 43 44 38 32 26 20 56 92 128 164 163 162 161 196 202 208 214 220 226 190 154
118 82 46 47 48 49 50 51 45 39 33 27 21 57 93 129 165 201 200 199 198 197
)

typeset -a colortable3; colortable3=(
16 59 102 145 188 231 224 181 138 217 95 174 210 131 167 203 52 88 124 160 196
202 209 166 216 173 130 208 223 180 137 215 94 172 214 222 179 136 221 178 220
230 187 144 229 101 186 228 143 185 227 58 100 142 184 226 190 191 148 192 149
106 154 193 150 107 155 64 112 118 156 113 70 119 76 82 194 151 108 157 65 114
120 71 77 83 22 28 34 40 46 47 84 41 121 78 35 48 158 115 72 85 29 42 49 122 79
36 86 43 50 195 152 109 159 66 116 123 73 80 87 23 30 37 44 51 45 81 38 117 74
31 39 153 110 67 75 24 32 33 111 68 25 69 26 27 189 146 103 147 60 104 105 61
62 63 17 18 19 20 21 57 99 56 141 98 55 93 183 140 97 135 54 92 129 177 134 91
171 128 165 225 182 139 219 96 176 213 133 170 207 53 90 127 164 201 200 206
163 212 169 126 199 218 175 132 205 89 162 198 211 168 125 204 161 197
)

typeset -a colortable4; colortable4=(
231 188 224 145 181 217 102 138 174 210 95 59 131 167 203 52 16 88 124 160 196
202 209 166 173 130 216 208 137 223 94 172 180 215 214 222 136 179 221 178 220
230 187 144 229 186 101 228 143 185 227 58 100 142 184 226 190 191 148 149 192
106 154 193 150 107 155 64 112 118 156 113 70 119 76 82 194 151 108 157 114 65
120 71 77 83 22 28 34 40 46 47 84 41 121 78 35 48 158 115 72 85 29 42 49 122 36
79 86 43 50 195 152 159 109 116 123 73 80 66 87 44 37 51 30 23 45 81 38 74 117
31 39 153 110 67 75 32 24 33 111 68 25 69 26 27 189 146 147 103 104 60 105 61
62 63 17 18 19 20 21 57 99 56 141 98 55 93 183 140 97 135 54 92 129 177 134 91
171 128 165 225 182 219 139 176 96 213 133 170 207 53 90 127 164 201 200 206
163 212 169 126 199 218 175 132 205 89 162 198 211 168 125 204 161 197
)

typeset -a colortable5; colortable5=(
16 17 52 53 18 22 23 58 59 54 88 89 90 19 24 60 94 95 55 96 28 29 30 64 91 124
65 66 125 100 126 101 25 127 102 20 61 56 97 130 131 132 31 133 92 67 26 160
103 34 128 136 161 35 137 21 36 162 138 37 139 70 163 71 62 164 72 73 106 107
108 98 57 109 142 143 144 145 32 166 134 167 168 93 169 68 170 104 27 129 38
172 140 196 173 63 174 197 165 175 198 74 176 199 40 200 99 110 41 201 42 43 76
44 178 146 77 33 179 135 78 180 79 181 112 80 182 113 202 114 69 203 115 171
148 204 116 149 205 150 206 151 184 105 152 207 185 186 187 188 39 141 208 75
209 177 210 211 212 111 213 45 147 214 81 215 183 216 46 217 47 218 117 48 219
49 82 50 83 51 153 84 85 118 86 220 119 87 221 189 120 222 121 223 154 122 224
155 123 225 156 157 190 158 191 159 192 193 226 194 227 195 228 229 230 231
)

typeset -a colortable6; colortable6=( 196 202 208 214 220 226 190 154 118 82 46
47 48 49 50 51 45 39 33 27 21 57 93 129 165 201 200 199 198 197 203 209 215 221
227 191 155 119 83 84 85 86 87 81 75 69 63 99 135 171 207 206 205 204 210 216
222 228 192 156 120 121 122 123 117 111 105 141 177 213 212 211 217 223 229 193
157 158 159 153 147 183 219 218 224 230 194 195 189 225 )

solve_one_iteration() {
    integer i j n i_add1 i_sub1 j_add1 j_sub1
    float DiA ReA DiB ReB

    float Aval Bval
    float Anext_x Anext_y Aprev_x Aprev_y
    float Bnext_x Bnext_y Bprev_x Bprev_y

    for (( i=1; i<=height; i ++ )); do
        i_add1=1+(i%height)
        i_sub1=i-1
        (( i_sub1 < 1 )) && i_sub1=height

        for (( j=1; j<=width; j ++ )); do
            j_add1=1+(j%width)
            j_sub1=j-1
            (( j_sub1 < 1 )) && j_sub1=width

            # const double Aval = m_Ao[i][j], Bval = m_Bo[i][j];
            index=i*width+j
            Aval=${Ao[$index]}
            Bval=${Bo[$index]}

            #
            # const double Anext_x = m_Ao[i][j_add1], Anext_y = m_Ao[i_add1][j];
            #
            index=i*width+j_add1
            Anext_x=${Ao[$index]}
            index=i_add1*width+j
            Anext_y=${Ao[$index]}

            # const double Aprev_x = m_Ao[i][j_sub1], Aprev_y = m_Ao[i_sub1][j];
            index=i*width+j_sub1
            Aprev_x=${Ao[$index]}
            index=i_sub1*width+j
            Aprev_y=${Ao[$index]}

            #
            # const double Bnext_x = m_Bo[i][j_add1], Bnext_y = m_Bo[i_add1][j];
            #
            index=i*width+j_add1
            Bnext_x=${Bo[$index]}
            index=i_add1*width+j
            Bnext_y=${Bo[$index]}

            # const double Bprev_x = m_Bo[i][j_sub1], Bprev_y = m_Bo[i_sub1][j];
            index=i*width+j_sub1
            Bprev_x=${Bo[$index]}
            index=i_sub1*width+j
            Bprev_y=${Bo[$index]}

            # Substance A - its diffusion process
            DiA=$(( CA * ( Anext_x - 2.0 * Aval + Aprev_x   +   Anext_y - 2.0 * Aval + Aprev_y ) ))
            # ... its reaction process
            ReA=$(( Aval * Bval - Aval - 12.0 ))

            # Euler step
            index=i*width+j
            An[$index]=$(( Aval + 0.0105 * (ReA + DiA) ))

            # Substance B - its diffusion process
            DiB=$(( CB * ( Bnext_x - 2.0 * Bval + Bprev_x   +   Bnext_y - 2.0 * Bval + Bprev_y ) ))
            # ... its reaction process
            ReB=$(( 16.0 - Aval * Bval ))

            # Euler step
            Bn[$index]=$(( Bval + 0.0105 * (ReB + DiB) ))
        done
    done
}

solve_one_iteration_reversed() {
    integer i j n i_add1 i_sub1 j_add1 j_sub1
    float DiA ReA DiB ReB

    float Aval Bval
    float Anext_x Anext_y Aprev_x Aprev_y
    float Bnext_x Bnext_y Bprev_x Bprev_y

    for (( i=1; i<=height; i ++ )); do
        i_add1=1+(i%height)
        i_sub1=i-1
        (( i_sub1 < 1 )) && i_sub1=height

        for (( j=1; j<=width; j ++ )); do
            j_add1=1+(j%width)
            j_sub1=j-1
            (( j_sub1 < 1 )) && j_sub1=width

            # const double Aval = m_Ao[i][j], Bval = m_Bo[i][j];
            index=i*width+j
            Aval=${An[$index]}
            Bval=${Bn[$index]}

            #
            # const double Anext_x = m_Ao[i][j_add1], Anext_y = m_Ao[i_add1][j];
            #
            index=i*width+j_add1
            Anext_x=${An[$index]}
            index=i_add1*width+j
            Anext_y=${An[$index]}

            # const double Aprev_x = m_Ao[i][j_sub1], Aprev_y = m_Ao[i_sub1][j];
            index=i*width+j_sub1
            Aprev_x=${An[$index]}
            index=i_sub1*width+j
            Aprev_y=${An[$index]}

            #
            # const double Bnext_x = m_Bo[i][j_add1], Bnext_y = m_Bo[i_add1][j];
            #
            index=i*width+j_add1
            Bnext_x=${Bn[$index]}
            index=i_add1*width+j
            Bnext_y=${Bn[$index]}

            # const double Bprev_x = m_Bo[i][j_sub1], Bprev_y = m_Bo[i_sub1][j];
            index=i*width+j_sub1
            Bprev_x=${Bn[$index]}
            index=i_sub1*width+j
            Bprev_y=${Bn[$index]}

            # Substance A - its diffusion process
            DiA=$(( CA * ( Anext_x - 2.0 * Aval + Aprev_x   +   Anext_y - 2.0 * Aval + Aprev_y ) ))
            # ... its reaction process
            ReA=$(( Aval * Bval - Aval - 12.0 ))

            # Euler step
            index=i*width+j
            Ao[$index]=$(( Aval + 0.0105 * (ReA + DiA) ))

            # Substance B - its diffusion process
            DiB=$(( CB * ( Bnext_x - 2.0 * Bval + Bprev_x   +   Bnext_y - 2.0 * Bval + Bprev_y ) ))
            # ... its reaction process
            ReB=$(( 16.0 - Aval * Bval ))

            # Euler step
            Bo[$index]=$(( Bval + 0.0105 * (ReB + DiB) ))
        done
    done
}

solve() {
    # Iterations
    for (( n=1; n<=iterations; n ++ )); do
        solve_one_iteration
        solve_one_iteration_reversed
    done
}

randomize() {
    integer i j
    float factor=0.1422
    float prev1=0.0 prev2=0.0
    float new1 new2

    for (( i=1; i<=height; i ++ )); do
        for (( j=1; j<=width; j ++ )); do
            new1=$(( rand48() ))
            if (( new1 > prev1 * factor )); then
                new1=new1*0.5 
            elif (( new1 < prev1 / factor )); then
                new1=new1*2.0
            fi

            new2=$(( rand48() ))
            if (( new2 > prev2 * factor )); then
                new2=new2*0.5
            elif (( new2 < prev2 / factor )); then
                new2=new2*2.0
            fi

            # Store into the array
            index=i*width+j
            Ao[$index]=$(( new1*30.0 ))
            Bo[$index]=$(( new2*30.0 ))

            prev1=new1
            prev2=new2
        done
    done
}

dump() {
    print
    for (( i=1; i<=height; i ++ )); do
        for (( j=1; j<=width; j ++ )); do
            index=i*width+j
            LANG=C printf "(%.1f,%.1f)" ${Ao[$index]} ${Bo[$index]}
        done
        print
    done
}

render() {
    print
    # Get maximum average
    float max=0.0
    for (( i=1; i<=height; i ++ )); do
        for (( j=1; j<=width; j ++ )); do
            index=i*width+j
            tmp1=${Bo[$index]}
            tmp2=${Bo[$index]}
            tmp1=$(( (tmp1+tmp2) / 2.0 ))

            if (( max < tmp1 )); then
                max=tmp1
            fi
        done
    done

    for (( i=1; i<=height; i ++ )); do
        for (( j=1; j<=width; j ++ )); do
            index=i*width+j
            tmp1=${Bo[$index]}
            tmp2=${Bo[$index]}
            tmp1=$(( (tmp1+tmp2) / 2.0 ))

            # 256-color variations
            #(( color=ceil( (tmp1/max)*214.99) ))
            #colidx=color+232

            #(( color=ceil( (tmp1/max)*20.99) ))
            #colidx=color+232

            #(( color=ceil( (tmp1/max)*5.99) ))
            #(( shade=ceil( (tmp1/max)*34.99) ))
            #colidx=color+shade*6+16

            #(( color=ceil( (tmp1/max)*215.99) ))
            #colidx=color
            #colidx=$colortable4[colidx]

            #(( color=ceil( (tmp1/max)*89.99) ))
            #colidx=color
            #colidx=$colortable4[colidx]
            
            #echo -n "\\e[48;5;${colidx}m "

            # 8 colors
            (( color=fabs(ceil(tmp1/max*7.99)) ))
            colidx=$color
            echo -n "\\e[4${colidx}m "

        done
        print
    done
}

width=$(( COLUMNS -1 ))
height=$(( LINES -2 ))
randomize
solve
render

# vim:ft=zsh
